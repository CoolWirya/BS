using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
//using Telerik.Web.UI;

namespace WebControllers.ArchiveDocument
{
    public partial class JArchiveControl : System.Web.UI.UserControl
    {
        #region Properties
        public string dataBaseClassName = "";
        public int dataBaseObjectCode;
        public string className;
        public int objectCode;
        public IDictionary<string, int[]> ExtraObjects;
        public int MaxFileSize
        {
            get
            {
                AsyncUpload_Archive.ChunkSize = 50000;
                return AsyncUpload_Archive.MaxFileSize;
            }
            set
            {
                AsyncUpload_Archive.MaxFileSize = value;
            }
        }
        public bool CanUploadFile
        {
            get
            {
                return pnlUpload.Visible;
            }
            set
            {
                pnlUpload.Visible = value;
            }
        }
        public bool CanDeleteFile
        {
            get
            {
                return btnDeleteFile.Visible;
            }
            set
            {
                btnDeleteFile.Visible = value;
                if (dgrArchivedFiles != null)
                    dgrArchivedFiles.AutoGenerateDeleteColumn = value;
            }
        }
        public bool CanDownloadFiles = true;


        public string ClassName
        {
            get
            {
                className = hfClassName.Value;
                return hfClassName.Value;
            }

            set
            {
                hfClassName.Value = value;
            }
        }

        public int ObjectCode
        {
            get
            {
                if (hfObjectCode.Value != string.Empty)
                {
                    objectCode = int.Parse(hfObjectCode.Value);
                    return objectCode;
                }
                else
                    return 0;
            }

            set
            {
                objectCode = value;
                hfObjectCode.Value = value.ToString();
            }
        }


        public string DataBaseClassName
        {
            get
            {
                dataBaseClassName = hfDataBaseClassName.Value;
                return hfDataBaseClassName.Value;
            }

            set
            {
                hfDataBaseClassName.Value = value;
            }
        }

        public int DataBaseObjectCode
        {
            get
            {
                if (hfDataBaseObjectCode.Value != string.Empty)
                {
                    dataBaseObjectCode = int.Parse(hfDataBaseObjectCode.Value);
                    return objectCode;
                }
                else
                    return 0;
            }

            set
            {
                dataBaseObjectCode = value;
                hfDataBaseObjectCode.Value = value.ToString();
            }
        }

        #endregion

        #region Methods
        public void LoadArchive()
        {
            ArchivedDocuments.JArchiveDocument jArchiveDocument = new ArchivedDocuments.JArchiveDocument(DataBaseClassName, DataBaseObjectCode);
            DataTable dt = jArchiveDocument.RetrieveForWeb(ClassName, ObjectCode, ExtraObjects);
            dt = WebClassLibrary.JWebDataBase.ConvertDateTimeColumns(dt, false);
            if (dt != null)
            {
                dgrArchivedFiles.DataSource = dt;
                dgrArchivedFiles.DataBind();
            }
            jArchiveDocument.Dispose();
        }

        public void SaveToArchive()
        {
            if (CanUploadFile == false) return;
            if (txtDescription.Text.Length == 0)
            {
                return;
            }
            ArchivedDocuments.JArchiveDocument jArchiveDocument = new ArchivedDocuments.JArchiveDocument(DataBaseClassName, DataBaseObjectCode);
            jArchiveDocument.ClassName = ClassName;
            jArchiveDocument.ObjectCode = ObjectCode;
            for (int i = 0; i < AsyncUpload_Archive.UploadedFiles.Count; i++)
            {
                ClassLibrary.JFile jFile = new ClassLibrary.JFile();
                jFile.Content = WebClassLibrary.JDataManager.ReadToEnd(AsyncUpload_Archive.UploadedFiles[i].InputStream);
                jFile.FileName = AsyncUpload_Archive.UploadedFiles[i].FileName;
                jFile.Extension = AsyncUpload_Archive.UploadedFiles[i].GetExtension();
                jFile.FileText = AsyncUpload_Archive.UploadedFiles[i].ContentType;
                jArchiveDocument.ArchiveDocument(jFile, ClassName, ObjectCode, txtDescription.Text, false);
            }
            jArchiveDocument.Dispose();
            txtDescription.Text = "";
            LoadArchive();
        }
        #endregion

        #region Event
        protected void Page_Load(object sender, EventArgs e)
        {

        }
        #endregion

        protected void btnUpload_Click(object sender, EventArgs e)
        {

            SaveToArchive();
        }

        protected void btnDeleteFile_Click(object sender, EventArgs e)
        {
            if (!CanDeleteFile) return;
            string index = Request.Form["radGridClickedRowIndex"].ToString();
            try
            {
                int rowindex = Convert.ToInt32(index);
                ArchivedDocuments.JArchiveDocument jArchiveDocument = new ArchivedDocuments.JArchiveDocument(DataBaseClassName, DataBaseObjectCode);
                jArchiveDocument.DeleteArchive(Convert.ToInt32(dgrArchivedFiles.MasterTableView.Items[rowindex]["ArchiveCode"].Text), true);
            }
            catch
            {
                return;
            }
        }

        protected void btnDownloadFile_Click(object sender, EventArgs e)
        {
            string index = Request.Form["radGridClickedRowIndex"].ToString();
            index = index.Replace(",", "");
            try
            {
                int rowindex = Convert.ToInt32(index);
                ArchivedDocuments.JArchiveDocument jArchiveDocument = new ArchivedDocuments.JArchiveDocument(DataBaseClassName, DataBaseObjectCode);
                ClassLibrary.JFile jFile = jArchiveDocument.RetrieveContent(Convert.ToInt32(dgrArchivedFiles.MasterTableView.Items[rowindex]["ArchiveCode"].Text));
                Response.BinaryWrite(jFile.Content);
                Response.ContentType = "application/octet-stream";
                string filename = Guid.NewGuid().ToString() + jFile.Extension;
                Response.AddHeader("Content-disposition", "attathment;filename=" + filename);
                Response.Flush();
            }
            catch
            {
                return;
            }
        }

        protected void dgrArchivedFiles_PreRender(object sender, EventArgs e)
        {
            if (dgrArchivedFiles.DataSource == null) return;
            DataTable dt = (dgrArchivedFiles.DataSource as DataTable);
            foreach (DataColumn col in dt.Columns)
                dgrArchivedFiles.MasterTableView.GetColumn(col.ColumnName).HeaderText = ClassLibrary.JLanguages._Text(col.ColumnName);
            dgrArchivedFiles.MasterTableView.Rebind();
        }

        protected void dgrArchivedFiles_ItemCommand(object sender, Telerik.Web.UI.GridCommandEventArgs e)
        {
            try
            {
                e.Item.Selected = true;
                int ArchiveCode = int.Parse(dgrArchivedFiles.SelectedValues["ArchiveCode"].ToString());
                int Code = int.Parse(dgrArchivedFiles.SelectedValues["Code"].ToString());
                // int Code = int.Parse((dgrArchivedFiles.DataSource as DataTable).Rows[int.Parse(dgrArchivedFiles.SelectedIndexes[0])]["Code"].ToString());
                ArchivedDocuments.JArchiveDocument jArchiveDocument = new ArchivedDocuments.JArchiveDocument(DataBaseClassName, DataBaseObjectCode);
                switch (e.CommandName)
                {
                    case "download":
                        jArchiveDocument = new ArchivedDocuments.JArchiveDocument(DataBaseClassName, DataBaseObjectCode);
                        ClassLibrary.JFile jFile = jArchiveDocument.RetrieveContent(ArchiveCode);
                        Response.BinaryWrite(jFile.Content);
                        Response.ContentType = "application/octet-stream";
                        string filename = Guid.NewGuid().ToString() + jFile.Extension;
                        Response.AddHeader("Content-disposition", "attathment;filename=" + filename);
                        Response.Flush();

                        break;
                    case "delete":

                        jArchiveDocument = new ArchivedDocuments.JArchiveDocument(DataBaseClassName, DataBaseObjectCode);
                        if (!CanDeleteFile) return;
                        jArchiveDocument.DeleteArchive(Code, true);
                        LoadArchive();
                        break;

                }
            }
            catch
            {
                return;
            }
        }

        //protected void dgrArchivedFiles_ItemCreated(object sender, Telerik.Web.UI.GridItemEventArgs e)
        //{
        //    if (e.Item.Cells.Count > 9)
        //        e.Item.Cells[8].Enabled = true;

        //}

    }
}